plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    // START: FlutterFire Configuration
    // id "com.google.gms.google-services"
    // id "com.google.firebase.crashlytics"
    // id "com.google.firebase.firebase-perf"
    // END: FlutterFire Configuration
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def debugKeyProperties = new Properties()
def debugKeyPropertiesFile = rootProject.file('debug_key.properties')
if (debugKeyPropertiesFile.exists()) {
    debugKeyProperties.load(new FileInputStream(debugKeyPropertiesFile))
}
android {
    namespace "xgame.studio.cat_and_dog"
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "xgame.studio.cat_and_dog"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }
    signingConfigs {
        debug {
            keyAlias debugKeyProperties['keyAlias']
            keyPassword debugKeyProperties['keyPassword']
            storeFile debugKeyProperties['storeFile'] ? file(debugKeyProperties['storeFile']) : null
            storePassword debugKeyProperties['storePassword']
        }
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            // // Add debug for chplay
            ndk {
                // debugSymbolLevel 'SYMBOL_TABLE' /// get function names in the Play Console's symbolicated stack traces
                debugSymbolLevel 'FULL' /// get function names, files, and line numbers in the Play Console's symbolicated stack traces

                // Using sqlite3_flutter_libs will include prebuilt binaries for 32-bit x86 devices which you probably won't need.
                // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64' // flutter current not support x86 https://docs.flutter.dev/deployment/android
                // abiFilters 'armeabi-v7a', 'x86_64', 'arm64-v8a', 'x86', 'armeabi', 'mips', 'mips64'
            }

            minifyEnabled true
            shrinkResources true
            // useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {}
repositories {
    google()
    mavenCentral()
}
